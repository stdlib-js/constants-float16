{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/cbrt-eps}\n*/\nsetReadOnly( constants, 'CBRT_EPS', require( '@stdlib/constants-float16-cbrt-eps' ) );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/eps}\n*/\nsetReadOnly( constants, 'EPS', require( '@stdlib/constants-float16-eps' ) );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/exponent-bias}\n*/\nsetReadOnly( constants, 'EXPONENT_BIAS', require( '@stdlib/constants-float16-exponent-bias' ) );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/max}\n*/\nsetReadOnly( constants, 'MAX', require( '@stdlib/constants-float16-max' ) );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/max-safe-integer}\n*/\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', require( '@stdlib/constants-float16-max-safe-integer' ) );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/min-safe-integer}\n*/\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', require( '@stdlib/constants-float16-min-safe-integer' ) );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/ninf}\n*/\nsetReadOnly( constants, 'NINF', require( '@stdlib/constants-float16-ninf' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( '@stdlib/constants-float16-num-bytes' ) );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/pinf}\n*/\nsetReadOnly( constants, 'PINF', require( '@stdlib/constants-float16-pinf' ) );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/precision}\n*/\nsetReadOnly( constants, 'PRECISION', require( '@stdlib/constants-float16-precision' ) );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/smallest-normal}\n*/\nsetReadOnly( constants, 'SMALLEST_NORMAL', require( '@stdlib/constants-float16-smallest-normal' ) );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/smallest-subnormal}\n*/\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', require( '@stdlib/constants-float16-smallest-subnormal' ) );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/sqrt-eps}\n*/\nsetReadOnly( constants, 'SQRT_EPS', require( '@stdlib/constants-float16-sqrt-eps' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n"],
  "mappings": "aA0BA,IAAIA,EAAc,QAAS,yCAA0C,EAUjEC,EAAY,CAAC,EAUjBD,EAAaC,EAAW,WAAY,QAAS,oCAAqC,CAAE,EAUpFD,EAAaC,EAAW,MAAO,QAAS,+BAAgC,CAAE,EAU1ED,EAAaC,EAAW,gBAAiB,QAAS,yCAA0C,CAAE,EAU9FD,EAAaC,EAAW,MAAO,QAAS,+BAAgC,CAAE,EAU1ED,EAAaC,EAAW,mBAAoB,QAAS,4CAA6C,CAAE,EAUpGD,EAAaC,EAAW,mBAAoB,QAAS,4CAA6C,CAAE,EAUpGD,EAAaC,EAAW,OAAQ,QAAS,gCAAiC,CAAE,EAU5ED,EAAaC,EAAW,YAAa,QAAS,qCAAsC,CAAE,EAUtFD,EAAaC,EAAW,OAAQ,QAAS,gCAAiC,CAAE,EAU5ED,EAAaC,EAAW,YAAa,QAAS,qCAAsC,CAAE,EAUtFD,EAAaC,EAAW,kBAAmB,QAAS,2CAA4C,CAAE,EAUlGD,EAAaC,EAAW,qBAAsB,QAAS,8CAA+C,CAAE,EAUxGD,EAAaC,EAAW,WAAY,QAAS,oCAAqC,CAAE,EAKpF,OAAO,QAAUA",
  "names": ["setReadOnly", "constants"]
}
